// cpu/icc-lib/chrono                                                 -*-C++-*-
// ----------------------------------------------------------------------------
//  Copyright (C) 2014 Dietmar Kuehl http://www.dietmar-kuehl.de         
//                                                                       
//  Permission is hereby granted, free of charge, to any person          
//  obtaining a copy of this software and associated documentation       
//  files (the "Software"), to deal in the Software without restriction, 
//  including without limitation the rights to use, copy, modify,        
//  merge, publish, distribute, sublicense, and/or sell copies of        
//  the Software, and to permit persons to whom the Software is          
//  furnished to do so, subject to the following conditions:             
//                                                                       
//  The above copyright notice and this permission notice shall be       
//  included in all copies or substantial portions of the Software.      
//                                                                       
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,      
//  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES      
//  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND             
//  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT          
//  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,         
//  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING         
//  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR        
//  OTHER DEALINGS IN THE SOFTWARE. 
// ----------------------------------------------------------------------------

#ifndef INCLUDED_CPU_ICC_LIB_CHRONO
#define INCLUDED_CPU_ICC_LIB_CHRONO

#include <ratio>
#include <utility>
#include <sys/time.h>

// ----------------------------------------------------------------------------
// The current version of Intel's compiler doesn't seem to have a chrono
// implementation. Here is a basic one as much as needed to get the tests
// running.

namespace std
{
    template <typename, typename> struct common_type;
    namespace chrono
    {
        template <typename Rep, typename Period = ratio<1> >
        class duration;
    }

    //-dk:TODO
    template <class Rep, class Period>
    struct common_type<chrono::duration<Rep, Period>,
                       chrono::duration<Rep, Period>> {
        typedef chrono::duration<Rep, Period> type;
    };

    namespace chrono
    {
        template <typename Rep1, typename Period1,
                  typename Rep2, typename Period2>
        constexpr
        typename std::common_type<std::chrono::duration<Rep1, Period1>,
                                  std::chrono::duration<Rep2, Period2>>::type
        operator-(duration<Rep1, Period1> const& lhs,
                  duration<Rep2, Period2> const& rhs);

        template <typename ToDuration, typename Rep, typename Period>
        constexpr ToDuration duration_cast(duration<Rep, Period> const&);

        typedef duration<int64_t, std::micro> microseconds;

        template <class Clock, class Duration = typename Clock::duration>
        class time_point;

        template <class Clock, class Duration1, class Duration2>
        constexpr typename std::common_type<Duration1, Duration2>::type
        operator-(time_point<Clock, Duration1> const& lhs,
                  time_point<Clock, Duration2> const& rhs);

        class high_resolution_clock;
    }
}

// ----------------------------------------------------------------------------

template <typename Rep, typename Period>
class std::chrono::duration
{
public:
    typedef Rep    rep;
    typedef Period period;

private:
    rep d_value;

public:
    duration(rep value): d_value(value) {}

    constexpr rep count() const { return this->d_value; }
};

// ----------------------------------------------------------------------------

template <typename Rep1, typename Period1, typename Rep2, typename Period2>
constexpr typename std::common_type<std::chrono::duration<Rep1, Period1>,
                                    std::chrono::duration<Rep2, Period2>>::type
std::chrono::operator-(std::chrono::duration<Rep1, Period1> const& lhs,
                       std::chrono::duration<Rep2, Period2> const& rhs)
{
    return lhs.count() - rhs.count();
}

// ----------------------------------------------------------------------------

template <typename ToDuration, typename Rep, typename Period>
constexpr ToDuration
std::chrono::duration_cast(std::chrono::duration<Rep, Period> const& from) {
    return ToDuration(from);
}

// ----------------------------------------------------------------------------

template <class Clock, class Duration>
class std::chrono::time_point
{
public:
    typedef Clock                     clock;
    typedef Duration                  duration;
    typedef typename duration::rep    rep;
    typedef typename duration::period period;

private: 
    rep d_value;

public:
    time_point(rep value): d_value(value) {}
    
    constexpr duration time_since_epoch() const {
        return duration(this->d_value);
    }
};

// ----------------------------------------------------------------------------

template <class Clock, class Duration1, class Duration2>
constexpr typename std::common_type<Duration1, Duration2>::type
std::chrono::operator-(std::chrono::time_point<Clock, Duration1> const& lhs,
                       std::chrono::time_point<Clock, Duration2> const& rhs)
{
    return lhs.time_since_epoch() - rhs.time_since_epoch();
}

// ----------------------------------------------------------------------------

class std::chrono::high_resolution_clock
{
public:
    typedef int64_t                                rep;
    typedef std::ratio<1, 10000000>                period;
    typedef std::chrono::duration<rep, period>     duration;
    typedef std::chrono::time_point<rep, duration> time_point;

    static constexpr bool is_steady = true;

    static time_point now() /*noexcept*/;
};

// ----------------------------------------------------------------------------

inline std::chrono::high_resolution_clock::time_point
std::chrono::high_resolution_clock::now() /*noexcept*/
{
    timeval tv;
    gettimeofday(&tv, 0);
    return time_point(int64_t(tv.tv_sec) * 1000000ll + int64_t(tv.tv_usec));
}

// ----------------------------------------------------------------------------

#endif
